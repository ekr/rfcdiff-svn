#!/bin/sh
#
#	Show changes between 2 internet-drafts using changebars
#
#       -----------------------------------------------------------------
#
#	Copyright 2002 Henrik Levkowetz
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#       -----------------------------------------------------------------
#
#	The purpose of this program is to compare two versions of an
#	internet-draft, and as output produce a text file which
#	contains the text of the second draft, with changebars in the
#	left margin which indicates the lines which have changed from
#	the first draft.
#
#	It is called as
#
#		chbars first-file second-file
#
#	The latest version is avaialble from
#		http://www.levkowetz.com/ietf/
#
#
#	 2 Feb 2003	- Expanded to also provide side-by-side html diff
#

version="0.23"

# ----------------------------------------------------------------------
# Strip headers footers and formfeeds from infile to stdout
# ----------------------------------------------------------------------
strip() {
  awk '
			{ gsub(/\r/, ""); }
			
/\[Page [0-9]+\]$/	{ next; }
/^\f/			{ next; }
/^Internet-Draft.+[0-9]+$/	{ newpage=1; next; }
/^[^ \t]/		{ sentence=1; }
/./			{
			   if (newpage) {
			      if (sentence) {
			         print "";
			      }
			   } else {
			      if (haveblank) {
			         print "";
			      }
			   }
			   haveblank=0;
			   sentence=0;
			   newpage=0;
			}
/[.:][ \t]*$/		{ sentence=1; }
/^$/			{ haveblank=1; next; }
			{ print; } 
' $1
}

# ----------------------------------------------------------------------
# From two words, find common prefix and differing part, join descriptively
# ----------------------------------------------------------------------
worddiff() {
   awk '
BEGIN	{
		w1 = ARGV[1]
		w2 = ARGV[2]
		format = ARGV[3]

		do {
			if (substr(w1,1,1) == substr(w2,1,1)) {
				w1 = substr(w1,2)	
				w2 = substr(w2,2)	
			} else {
				break;
			}
			prefixlen++;
		} while (length(w1) && length(w2))

		prefix = substr(ARGV[1],1,prefixlen);

		do {
			l1 = length(w1);
			l2 = length(w2);
			if (substr(w1,l1,1) == substr(w2,l2,1)) {
				w1 = substr(w1,1,l1-1)	
				w2 = substr(w2,1,l2-1)	
			} else {
				break;
			}
		} while (l1 && l2)

		suffix = substr(ARGV[1], prefixlen+length(w1))

		printf format, prefix, w1, w2, suffix;
	}
' $1 $2 $3
}

# ----------------------------------------------------------------------
# Generate a html page with side-by-side diff from a unified diff
# ----------------------------------------------------------------------
htmldiff() {
   awk '
BEGIN	{
           FS = "[ \t,]";	   
	   linenum = 1;
	   num1 = 1;
	   num2 = 1;
	}

function header(file1, file2) {
   printf " \n\
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n\
<html> \n\
<head> \n\
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> \n\
<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /> \n\
<link rel=\"stylesheet\" href=\"cvs.css\" type=\"text/css\" /> \n\
<title>Diff: %s - %s</title> \n\
</head> \n\
<body> \n\
<style> \n\
tr { font-size: 9pt; height: 1em; } \n\
td { white-space: pre; font-family: monospace; } \n\
th { font-size: 12pt; } \n\
.left   { background-color: #EEE; } \n\
.right  { background-color: #FFF; } \n\
.diff   { background-color: lightblue; } \n\
.insert { background-color: lightgreen; } \n\
.delete { background-color: #FF8; } \n\
.void   { background-color: lightyellow; } \n\
</style> \n\
<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \
<tr bgcolor=\"orange\"><th>%s</th><th> </th><th>%s</th><tr> \
", file1, file2, file1, file2;
}

function worddiff(w1, w2) {
   prefixlen = 0;
   word1 = w1;
   do {
      if (substr(w1,1,1) == substr(w2,1,1)) {
	 w1 = substr(w1,2);
	 w2 = substr(w2,2);
      } else {
	 break;
      }
      prefixlen++;
   } while (length(w1) && length(w2));

   prefix = substr(word1,1,prefixlen);

   do {
      l1 = length(w1);
      l2 = length(w2);
      if (substr(w1,l1,1) == substr(w2,l2,1)) {
	 w1 = substr(w1,1,l1-1);
	 w2 = substr(w2,1,l2-1);
      } else {
	 break;
      }
   } while (l1 && l2);

   suffix = substr(word1, prefixlen+length(w1)+1);

   wordpart[0] = prefix;
   wordpart[1] = w1;
   wordpart[2] = w2;
   wordpart[3] = suffix;
}

function flush() {
	   rclass = lclass = "diff";
	   if (num1 == linenum) {
	      rclass = "insert";
	   }
	   if (num2 == linenum) {
	      lclass = "delete";
	   }
	   for (l = linenum; l < num1 || l < num2; l++) {
	      if (l in stack1) {
		 line1 = stack1[l];
		 delete stack1[l];
		 if (line1 == "")
		    line1 = "                                                                        ";
	      } else {
		 line1 = "";
	      }
	      if (l in stack2) {
		 line2 = stack2[l];
		 delete stack2[l];
		 if (line2 == "")
		    line2 = "                                                                        ";
	      } else {
		 line2 = "";
	      }
	      worddiff(line1, line2);

	      left  = sprintf("<td class=\"left\" >%s<span class=\"%s\">%s</span>%s</td>", wordpart[0], lclass, wordpart[1], wordpart[3]);
	      right = sprintf("<td class=\"right\">%s<span class=\"%s\">%s</span>%s</td>", wordpart[0], rclass, wordpart[2], wordpart[3]);
	      printf "      <tr>%s<td> </td>%s</tr>\n", left, right;
	   }
	}

/^@@/	{
	   linenum = 0 - $2;
	   diffnum ++;
	   if (linenum > 1) {
	      printf "      <tr><td class=\"left\"></td><td> </td><td class=\"right\"></td></tr>\n";
	      printf "      <tr bgcolor=\"gray\" align=\"left\"><th><a name=\"diff-%s\">&nbsp;&nbsp;Skipping to line %s: </th><th> </th><th></th></tr>\n", diffnum, linenum;
	   }
	}

/^---/	{  file1 = $2; next; }
/^[+][+][+]/	{  file2 = $2; header(file1, file2); next; }
/^[ ]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   flush();
	   printf "      <tr><td class=\"left\">%s</td><td> </td><td class=\"right\">%s</td></tr>\n", line, line;
	   linenum ++;
	   num1 = linenum;
	   num2 = linenum;
	}
/^-/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack1[num1] = line;
	   num1++;
	}
/^[+]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack2[num2] = line;
	   num2++;
	}

END	{
	   print "    </table>\n  </body>\n</html>";
	}
' $1 
}

# ----------------------------------------------------------------------
# Process options (Options are not used currently!)
# ----------------------------------------------------------------------
while [ $# -gt 0 ]; do
   case "$1" in
      -r) options="$options $1 $2"; rev=$2; shift;;
      -*) options="$options $1" ;;
      *)  files="$files $1";;
   esac
   shift
done

set $files

# ----------------------------------------------------------------------
# Maybe get one of the files from cvs. Determine output file name. Make
# working file copies
# ----------------------------------------------------------------------

if [ $# -eq 2 ]; then
   if [ $1 = $2 ]; then
      echo The files are the same file
      exit
   fi
   mv $1 $1.orig
   mv $2 $2.orig
   base1=$(basename $1)
   base2=$(basename $2)
   outfile=$(worddiff $base2 $base1 "%s%s-from-%s").chbar
   htmlfile=$(worddiff $base2 $base1 "%s%s-from-%s").diff.html
else
   echo "Usage: chbars file1 file2"
fi

# ----------------------------------------------------------------------
# Strip headers/footers from both files
# ----------------------------------------------------------------------
strip $1.orig > $1
strip $2.orig > $2

# ----------------------------------------------------------------------
# Do diff
# ----------------------------------------------------------------------
if cmp $1 $2 >/dev/null; then
   echo Files are identical
else
    diff -ubBw -10000 $1 $2 | grep -v "^-" | tail +3 | sed 's/^+/|/' > $outfile
    diff -ubBw -10 $1 $2 | htmldiff > $htmlfile
    echo "  Changebar text was output to $outfile,"
    echo "  html diff to $htmlfile"
fi

if [ -f $1.orig ]; then mv $1.orig $1; fi
if [ -f $2.orig ]; then mv $2.orig $2; fi

