#!/bin/sh
#
#	Show changes between 2 internet-drafts using changebars or html
#	side-by-side diff.
#
#       -----------------------------------------------------------------
#
#	Copyright 2002 Henrik Levkowetz
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#       -----------------------------------------------------------------
#
#	The purpose of this program is to compare two versions of an
#	internet-draft, and as output produce a text file which
#	contains the text of the second draft, with changebars in the
#	left margin which indicates the lines which have changed from
#	the first draft.
#
#	It is called as
#
#		chbars first-file second-file
#
#	The latest version is avaialble from
#		http://www.levkowetz.com/ietf/
#
#
#	 2 Sep 2003	v0.32 - fixed spurious error message when using
#			--wdiff option
#	 1 Sep 2003	v0.31 - not touching the original files, using
#			temporary directory for work files.
#	29 Aug 2003	Removed explicit font size for output. Changed
#			regexp for page start (now accepting space in
#			"Internet Draft".
#	16 Apr 2003	v0.29 - added wdiff support
#	 6 Mar 2003	v0.28 - added --html, --chbars and --diff switches
#	 3 Mar 2003	v0.27 - Changed page regexp to accept lowercase
#				'p'.
#	 2 Feb 2003	- Expanded to also provide side-by-side html diff
#
#	

export version="v0.31"
export pagecache="/tmp/pagecache-$$"
export prelines="10"
export workdir="/tmp/rfcchbars-$$"

# ----------------------------------------------------------------------
# Strip headers footers and formfeeds from infile to stdout
# ----------------------------------------------------------------------
strip() {
  awk '
			{ gsub(/\r/, ""); }
			
/\[[Pp]age [0-9ivx]+\]$/	{
					match($0, /\[[Pp]age [0-9ivx]+\]$/);
					print substr($0, RSTART+6, RLENGTH-7), outline > ENVIRON["pagecache"]
					next;
				}
/^\f/				{ next; }
/^Internet.Draft.+[0-9]+$/	{ newpage=1; next; }
/^INTERNET.DRAFT.+[0-9]+$/	{ newpage=1; next; }
/^RFC.+[0-9]+$/			{ newpage=1; next; }
/^[^ \t]/			{ sentence=1; }
/./				{
				   if (newpage) {
				      if (sentence) {
					 outline++; print "";
				      }
				   } else {
				      if (haveblank) {
					  outline++; print "";
				      }
				   }
				   haveblank=0;
				   sentence=0;
				   newpage=0;
				}
/[.:][ \t]*$/			{ sentence=1; }
/^$/				{ haveblank=1; next; }
				{ outline++; print; } 
' $1
}

# ----------------------------------------------------------------------
# From two words, find common prefix and differing part, join descriptively
# ----------------------------------------------------------------------
worddiff() {
   awk '
BEGIN	{
		w1 = ARGV[1]
		w2 = ARGV[2]
		format = ARGV[3]

		do {
			if (substr(w1,1,1) == substr(w2,1,1)) {
				w1 = substr(w1,2)	
				w2 = substr(w2,2)	
			} else {
				break;
			}
			prefixlen++;
		} while (length(w1) && length(w2))

		prefix = substr(ARGV[1],1,prefixlen);

		do {
			l1 = length(w1);
			l2 = length(w2);
			if (substr(w1,l1,1) == substr(w2,l2,1)) {
				w1 = substr(w1,1,l1-1)	
				w2 = substr(w2,1,l2-1)	
			} else {
				break;
			}
		} while (l1 && l2)

		suffix = substr(ARGV[1], prefixlen+length(w1))

		printf format, prefix, w1, w2, suffix;
	}
' $1 $2 $3
}

# ----------------------------------------------------------------------
# Generate a html page with side-by-side diff from a unified diff
# ----------------------------------------------------------------------
htmldiff() {
   awk '
BEGIN	{
           FS = "[ \t,]";	   
	   linenum = 1;
	   num1 = 1;
	   num2 = 1;

	   # Read pagecache
	   maxpage = 1
	   pageend[0] = 2;
	   while ( getline < ENVIRON["pagecache"] > 0) {
	      pageend[$1] = $2;
	      if ($1+0 > maxpage) maxpage = $1+0;
	   }

	}

function header(file1, file2) {
   printf " \n\
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n\
<html> \n\
<head> \n\
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> \n\
<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /> \n\
<title>Diff: %s - %s</title> \n\
</head> \n\
<body> \n\
<!-- Generated by chbars %s --> \n\
<style> \n\
tr { } \n\
td { white-space: pre; font-family: monospace; } \n\
th { font-size: 12pt; } \n\
.small  { font-size: 8pt; } \n\
.left   { background-color: #EEE; } \n\
.right  { background-color: #FFF; } \n\
.diff   { background-color: lightblue; } \n\
.insert { background-color: lightgreen; } \n\
.delete { background-color: #FCC; } \n\
.void   { background-color: lightyellow; } \n\
</style> \n\
<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \
<tr bgcolor=\"orange\"><th>%s</th><th> </th><th>%s</th><tr> \
", file1, file2, ENVIRON["version"], file1, file2;
}

function worddiff(w1, w2) {
   prefixlen = 0;
   word1 = w1;
   do {
      if (substr(w1,1,1) == substr(w2,1,1)) {
	 w1 = substr(w1,2);
	 w2 = substr(w2,2);
      } else {
	 break;
      }
      prefixlen++;
   } while (length(w1) && length(w2));

   prefix = substr(word1,1,prefixlen);

   do {
      l1 = length(w1);
      l2 = length(w2);
      if (substr(w1,l1,1) == substr(w2,l2,1)) {
	 w1 = substr(w1,1,l1-1);
	 w2 = substr(w2,1,l2-1);
      } else {
	 break;
      }
   } while (l1 && l2);

   suffix = substr(word1, prefixlen+length(w1)+1);

   wordpart[0] = prefix;
   wordpart[1] = w1;
   wordpart[2] = w2;
   wordpart[3] = suffix;
}

function flush() {
	   rclass = lclass = "diff";
	   if (num1 == linenum) 
	      rclass = "insert";
	   if (num2 == linenum) 
	      lclass = "delete";
	   multiline = ((num1 - linenum) > 1) || ((num2 - linenum) > 1);
	   for (l = linenum; l < num1 || l < num2; l++) {
	      if (l in stack1) {
		 line1 = stack1[l];
		 delete stack1[l];
		 if (line1 == "")
		    line1 = "                                                                        ";
	      } else {
		 line1 = "";
	      }
	      if (l in stack2) {
		 line2 = stack2[l];
		 delete stack2[l];
		 if (line2 == "")
		    line2 = "                                                                        ";
	      } else {
		 line2 = "";
	      }
	      worddiff(line1, line2);

	     if (wordpart[1] == "" && !multiline) 
	        rclass = "insert";
	     if (wordpart[2] == "" && !multiline) 
		lclass = "delete";

	      left  = sprintf("<td class=\"left\" >%s<span class=\"%s\">%s</span>%s</td>", wordpart[0], lclass, wordpart[1], wordpart[3]);
	      right = sprintf("<td class=\"right\">%s<span class=\"%s\">%s</span>%s</td>", wordpart[0], rclass, wordpart[2], wordpart[3]);
	      printf "      <tr>%s<td> </td>%s</tr>\n", left, right;
	   }
	}

function getpage(line) {
	    line = line + ENVIRON["prelines"];
	    page = "?";
	    for (p=1; p <= maxpage; p++) {
		if (pageend[p] == 0) continue;
		if (line <= pageend[p]) {
		    page = p;
		    break;
		}
	    }
	    return page;
	}

function getpageline(line, page) {
	    if (pageend[page-1]+0 != 0) {
		return line + ENVIRON["prelines"] - pageend[page-1] + 3; # 3 is header lines stripped
	    } else {
		return "?"
	    } 
	}

/^@@/	{
	   linenum = 0 - $2;
	   diffnum ++;
	   if (linenum > 1) {
	      printf "      <tr><td class=\"left\"></td><td> </td><td class=\"right\"></td></tr>\n";
	      printf "      <tr bgcolor=\"gray\" align=\"left\"><th><a name=\"diff-%s\">&nbsp;&nbsp;Skipping to change at page %s, line %s: </th><th> </th><th></th></tr>\n", diffnum, getpage(linenum), getpageline(linenum, page);
	   }
	}

/^---/	{  file1 = $2; next; }
/^[+][+][+]/	{  file2 = $2; header(file1, file2); next; }
/^[ ]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   flush();
	   printf "      <tr><td class=\"left\">%s</td><td> </td><td class=\"right\">%s</td></tr>\n", line, line;
	   linenum ++;
	   num1 = linenum;
	   num2 = linenum;
	}
/^-/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack1[num1] = line;
	   num1++;
	}
/^[+]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack2[num2] = line;
	   num2++;
	}

END	{
	   print "    </table>\n  </body>\n</html>";
	}
' $1 
}

# ----------------------------------------------------------------------
# Utility for error exit
# ----------------------------------------------------------------------
die() {
   echo $*;
   exit 1;
}

# ----------------------------------------------------------------------
# Process options (Options are not used currently!)
# ----------------------------------------------------------------------
opthtml=1; optdiff=0; optchbars=0; optwdiff=0;
while [ $# -gt 0 ]; do
   case "$1" in
      --html)   opthtml=1; optdiff=0; optchbars=0; optwdiff=0;;
      --diff)   opthtml=0; optdiff=1; optchbars=0; optwdiff=0;;
      --chbars) opthtml=0; optdiff=0; optchbars=1; optwdiff=0;;
      --wdiff)  opthtml=0; optdiff=0; optchbars=0; optwdiff=1;;
      --version)echo "rfcchbars $version"; exit 0;;

      -r) options="$options $1 $2"; rev=$2; shift;;
      -v) echo "rfcchbars $version"; exit 0;;
      -*) options="$options $1" ;;
      *)  files="$files $1";;
   esac
   shift
done

set $files

# ----------------------------------------------------------------------
# Maybe get one of the files from cvs. Determine output file name. Make
# working file copies
# ----------------------------------------------------------------------
set -x

if [ $# -ge 2 ]; then
   if [ $1 = $2 ]; then
      echo The files are the same file
      exit
   fi
#   mv $1 $1.orig
#   mv $2 $2.orig
   base1=$(basename $1)
   base2=$(basename $2)
   outbase=$(worddiff $base2 $base1 "%s%s-from-%s")
else
   echo "Usage: chbars file1 file2"
   exit 1
fi


# ----------------------------------------------------------------------
# create working directory.
# ----------------------------------------------------------------------
mkdir $workdir || die "$0: Error: Failed to create temporary directory '$workdir'."

# ----------------------------------------------------------------------
# Strip headers/footers from both files
# ----------------------------------------------------------------------


# The last file we strip determines the page numbers for htmldiff
strip $2 > $workdir/$base2
strip $1 > $workdir/$base1


# ----------------------------------------------------------------------
# Get output file name
# ----------------------------------------------------------------------
if [ "$3" ]; then
  outfile=$3
else
    if [ $opthtml -gt 0 ]; then
      outfile=$outbase.diff.html
    fi
    if [ $optchbars -gt 0 ]; then
      outfile=$outbase.chbar
    fi
    if [ $optdiff -gt 0 ]; then
      outfile=$outbase.diff
    fi
fi
if [ "$outfile" ]; then
   tempout=$(basename $outfile)
fi

# ----------------------------------------------------------------------
# Do diff
# ----------------------------------------------------------------------

cd $workdir
if cmp $base1 $base2 >/dev/null; then
   echo Files are identical
else
   if [ $opthtml -gt 0 ]; then
      diff -ubBwd -$prelines $base1 $base2 | htmldiff > $tempout
   fi
   if [ $optchbars -gt 0 ]; then
      diff -ubBwd -10000 $base1 $base2 | grep -v "^-" | tail +3 | sed 's/^+/|/' > $tempout
   fi
   if [ $optdiff -gt 0 ]; then
      diff -ubBwd -$prelines $base1 $base2 | htmldiff > $tempout
   fi
   if [ $optwdiff -gt 0 ]; then
      wdiff -a $base1 $base2 
   fi
fi
rm $base1 $base2
cd -

if [ -f $workdir/$tempout ]; then mv $workdir/$tempout $outfile; fi
if [ -f $pagecache ]; then rm $pagecache; fi
rmdir $workdir

