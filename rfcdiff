#!/bin/sh
#
# Synopsis:
#	Show changes between 2 internet-drafts using changebars or html
#	side-by-side diff.
#
# Usage:
#	rfcdiff [options] file1 file2
#	
#	rfcdiff takes two RFCs or Internet-Drafts in text form as input, and
#	produces output which indicates the differences found in one of various
#	forms, controlled by the options listed below. In all cases, page
#	headers and page footers are stripped before looking for changes.
#	
#	--html		Produce side-by-side .html diff (default)
#	--chbars	Produce changebar marked .txt output
#	--diff		Produce a regular diff output
#	--wdiff		Produce paged wdiff output
#	
#	--browse	Show html output in browser
#	--keep		Don't delete temporary workfiles
#	
#	--version	Show version
#	--help		Show this help
#	--info "Synopsis|Usage|Copyright|Description|Log"
#			Show various info
#
# Copyright:
#	-----------------------------------------------------------------
#	
#	Copyright 2002 Henrik Levkowetz
#	
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#	
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#	
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#	
#	-----------------------------------------------------------------
#
# Description:
#	
#	The purpose of this program is to compare two versions of an
#	internet-draft, and as output produce a diff in one of several formats:
#	
#		- side-by-side html diff
#		- paged wdiff output in a text terminal
#		- a text file with changebars in the left margin
#		- a simple unified diff output
#	
#	In all cases, internet-draft headers and footers are stripped before
#	generating the diff, to produce a cleaner diff.
#	
#	It is called as
#	
#		rfcdiff first-file second-file
#	
#	The latest version is available from
#		http://www.levkowetz.com/ietf/tools/rfcdiff
#
# Log:
#	
#	17 Dec 2003	v1.01 - Fixed a bug where diffs with no text
#			occurring after the last change would be shown
#			without the last change. Added some debug
#			functionality to be able to track this one down.
#	
#	14 Dec 2003	v1.00 - Bumped version number to 1.00
#	
#	 6 Dec 2003	v0.42 - Added html diff output for the
#			identical files case.
#	
#	 5 Dec 2003	v0.41 - Added --info option
#	
#	25 Nov 2003	v0.40 - Added the use of wget (if available) to
#			pull down remote source files (http: or ftp:)
#	
#	20 Nov 2003	v0.39 - Added 'End of changes' line at the end
#			of html diff. Added a test on wdiff producing
#			reasonable output with --version option, to
#			avoid old broken wdiff versions.
#	
#	20 Nov 2003	v0.38 - Added --keep option, to keep temporary
#			files.
#	
#	20 Nov 2003	v0.37 - Added --nowdiff option, to make --html
#			*not* use wdiff even if it is available.
#	
#	20 Nov 2003	v0.36 - Added --browse option, to optionally
#			start a browser to show html diff output.
#			Refined how we look for a wdiff binary.
#	
#	18 Nov 2003	v0.35 - minor tweaks to header/footer stripping
#			regexps. Changed color marking of differences.
#			Other minor tweaks and comment updates.
#	
#	16 Nov 2003	v0.34 - removed listing of environment when no
#			files were given on the command line. Added
#			help text. Added the possibility of using wdiff to get
#			the changed words in a change block highlighted.
#	
#	23 Oct 2003	v0.33 - using different dir's for the stripped
#			files, to be able to diff files with the same
#			basename. 
#	
#	 2 Sep 2003	v0.32 - fixed spurious error message when using
#			--wdiff option
#	
#	 1 Sep 2003	v0.31 - not touching the original files, using
#			temporary directory for work files.
#	
#	29 Aug 2003	Removed explicit font size for output. Changed
#			regexp for page start (now accepting space in
#			"Internet Draft".
#	
#	16 Apr 2003	v0.29 - added wdiff support
#	
#	 6 Mar 2003	v0.28 - added --html, --chbars and --diff switches
#	
#	 3 Mar 2003	v0.27 - Changed page regexp to accept lowercase
#				'p'.
#	
#	 2 Feb 2003	Expanded to provide side-by-side html diff, in
#			addition to changebars in .txt files
#	
# End:
#	

export version="v1.01"
export prelines="10"
export basename=$(basename $0)
export workdir="/tmp/$basename-$$"
export pagecache="$workdir/pagecache"

# ----------------------------------------------------------------------
# Strip headers footers and formfeeds from infile to stdout
# ----------------------------------------------------------------------
strip() {
  awk '
			{ gsub(/\r/, ""); }
			
/\[[Pp]age [0-9ivx]+\] *$/	{
					match($0, /\[[Pp]age [0-9ivx]+\]/);
					print substr($0, RSTART+6, RLENGTH-7), outline > ENVIRON["pagecache"]
					next;
				}
/^\f/				{ newpage=1; next; }
/^Internet.Draft.+[0-9]+ *$/	{ newpage=1; next; }
/^INTERNET.DRAFT.+[0-9]+ *$/	{ newpage=1; next; }
/^RFC.+[0-9]+$/			{ newpage=1; next; }
/^[^ \t]/			{ sentence=1; }
/./				{
				   if (newpage) {
				      if (sentence) {
					 outline++; print "";
				      }
				   } else {
				      if (haveblank) {
					  outline++; print "";
				      }
				   }
				   haveblank=0;
				   sentence=0;
				   newpage=0;
				}
/[.:][ \t]*$/			{ sentence=1; }
/^[ \t]*$/			{ haveblank=1; next; }
				{ outline++; print; } 
' $1
}

# ----------------------------------------------------------------------
# From two words, find common prefix and differing part, join descriptively
# ----------------------------------------------------------------------
worddiff() {
   awk '
BEGIN	{
		w1 = ARGV[1]
		w2 = ARGV[2]
		format = ARGV[3]

		do {
			if (substr(w1,1,1) == substr(w2,1,1)) {
				w1 = substr(w1,2)	
				w2 = substr(w2,2)	
			} else {
				break;
			}
			prefixlen++;
		} while (length(w1) && length(w2))

		prefix = substr(ARGV[1],1,prefixlen);

		do {
			l1 = length(w1);
			l2 = length(w2);
			if (substr(w1,l1,1) == substr(w2,l2,1)) {
				w1 = substr(w1,1,l1-1)	
				w2 = substr(w2,1,l2-1)	
			} else {
				break;
			}
		} while (l1 && l2)

		suffix = substr(ARGV[1], prefixlen+length(w1))

		printf format, prefix, w1, w2, suffix;
	}
' $1 $2 $3
}

# ----------------------------------------------------------------------
# Generate a html page with side-by-side diff from a unified diff
# ----------------------------------------------------------------------
htmldiff() {
   awk -v file1=$1 -v file2=$2 '
BEGIN	{
           FS = "[ \t,]";	   
	   linenum = 1;
	   num1 = 1;
	   num2 = 1;

	   # Read pagecache
	   maxpage = 1
	   pageend[0] = 2;
	   while ( getline < ENVIRON["pagecache"] > 0) {
	      pageend[$1] = $2;
	      if ($1+0 > maxpage) maxpage = $1+0;
	   }

	   wdiff = ENVIRON["wdiffbin"]
	   base1 = ENVIRON["base1"]
	   base2 = ENVIRON["base2"]

	   header(base1, base2);

	}

function header(file1, file2) {
   printf " \n\
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n\
<html> \n\
<head> \n\
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /> \n\
<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /> \n\
<title>Diff: %s - %s</title> \n\
</head> \n\
<body> \n\
<!-- Generated by rfcdiff %s --> \n\
<style> \n\
tr { } \n\
td { white-space: pre; font-family: monospace; } \n\
th { font-size: 12pt; } \n\
.small  { font-size: 8pt; } \n\
.left   { background-color: #EEE; } \n\
.right  { background-color: #FFF; } \n\
.diff   { background-color: lightblue; } \n\
.lblock { background-color: #BFB; } \n\
.rblock { background-color: #FF8; } \n\
.insert { background-color: cyan; } \n\
.delete { background-color: #ACF; } \n\
.void   { background-color: lightyellow; } \n\
</style> \n\
<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \
<tr bgcolor=\"orange\"><th>&nbsp;%s&nbsp;</th><th> </th><th>&nbsp;%s&nbsp;</th><tr> \
", file1, file2, ENVIRON["version"], file1, file2;
}

function worddiff(w1, w2) {
   prefixlen = 0;
   word1 = w1;
   do {
      if (substr(w1,1,1) == substr(w2,1,1)) {
	 w1 = substr(w1,2);
	 w2 = substr(w2,2);
      } else {
	 break;
      }
      prefixlen++;
   } while (length(w1) && length(w2));

   prefix = substr(word1,1,prefixlen);

   do {
      l1 = length(w1);
      l2 = length(w2);
      if (substr(w1,l1,1) == substr(w2,l2,1)) {
	 w1 = substr(w1,1,l1-1);
	 w2 = substr(w2,1,l2-1);
      } else {
	 break;
      }
   } while (l1 && l2);

   suffix = substr(word1, prefixlen+length(w1)+1);

   wordpart[0] = prefix;
   wordpart[1] = w1;
   wordpart[2] = w2;
   wordpart[3] = suffix;
}

function chunkdiff() {
   if (num1 == linenum && num2 == linenum) return;
   chunk++;

   chunkfile1= sprintf("1/chunk%04d", chunk);
   chunkfile2= sprintf("2/chunk%04d", chunk);
   printf "" > chunkfile1;
   printf "" > chunkfile2;
   for (l = linenum; l < num1; l++) { print stack1[l] >> chunkfile1; }
   for (l = linenum; l < num2; l++) { print stack2[l] >> chunkfile2; }
   close(chunkfile1);
   close(chunkfile2);

   cmd1 = sprintf("%s -n -2 -w \"<span class=\\\"delete\\\">\"  -x \"</span>\" %s %s", wdiff, chunkfile1, chunkfile2);
   cmd2 = sprintf("%s -n -1 -y \"<span class=\\\"insert\\\">\"  -z \"</span>\" %s %s", wdiff, chunkfile1, chunkfile2);

   for (l = linenum; l < num1; l++) { if (cmd1 | getline > 0) { stack1[l] = $0; }}
   for (l = linenum; l < num2; l++) { if (cmd2 | getline > 0) { stack2[l] = $0; }}

   close(cmd1);
   close(cmd2);
}

function flush() {
   multiline = ((num1 - linenum) > 1) || ((num2 - linenum) > 1);
   if (multiline && (wdiff != "")) chunkdiff();

   for (l = linenum; l < num1 || l < num2; l++) {
      if (l in stack1) {
	 line1 = stack1[l];
	 delete stack1[l];
	 if (line1 == "")
	    line1 = "                                                                        ";
      } else {
	 line1 = "";
      }
      if (l in stack2) {
	 line2 = stack2[l];
	 delete stack2[l];
	 if (line2 == "")
	    line2 = "                                                                        ";
      } else {
	 line2 = "";
      }

      if (multiline && (wdiff != "")) {
	 left  = sprintf("<td class=\"lblock\">%s</td>", line1);
	 right = sprintf("<td class=\"rblock\">%s</td>", line2);
      } else {
	 worddiff(line1, line2);

	 left  = sprintf("<td class=\"lblock\">%s<span class=\"delete\">%s</span>%s</td>", wordpart[0], wordpart[1], wordpart[3]);
	 right = sprintf("<td class=\"rblock\">%s<span class=\"insert\">%s</span>%s</td>", wordpart[0], wordpart[2], wordpart[3]);
      }
      printf "      <tr>%s<td> </td>%s</tr>\n", left, right;
   }
}

function getpage(line) {
    line = line + ENVIRON["prelines"];
    page = "?";
    for (p=1; p <= maxpage; p++) {
	if (pageend[p] == 0) continue;
	if (line <= pageend[p]) {
	    page = p;
	    break;
	}
    }
    return page;
}

function getpageline(line, page) {
    if (pageend[page-1]+0 != 0) {
	return line + ENVIRON["prelines"] - pageend[page-1] + 3; # 3 is header lines stripped
    } else {
	return "?"
    } 
}

/^@@/	{
	   linenum = 0 - $2;
	   diffnum ++;
	   if (linenum > 1) {
	      printf "      <tr><td class=\"left\"></td><td> </td><td class=\"right\"></td></tr>\n";
	      printf "      <tr bgcolor=\"gray\" align=\"left\"><th><a name=\"diff-%s\">&nbsp;&nbsp;Skipping to change at page %s, line %s: </th><th> </th><th></th></tr>\n", diffnum, getpage(linenum), getpageline(linenum, page);
	   }
	}

/^---/	{  next; }
/^[+][+][+]/	{  next; }
/^[ ]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);

	   flush();
	   printf "      <tr><td class=\"left\">%s</td><td> </td><td class=\"right\">%s</td></tr>\n", line, line;
	   linenum ++;
	   num1 = linenum;
	   num2 = linenum;
	}
/^-/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack1[num1] = line;
	   num1++;
	}
/^[+]/	{
	   gsub("&", "\\&amp;")
	   gsub("<", "\\&lt;")
	   gsub(">", "\\&gt;")
	   line = substr($0, 2);
	   stack2[num2] = line;
	   num2++;
	}

END	{
	   flush();
	   printf("\n\
     <tr><td class=\"left\"></td><td> </td><td class=\"right\"></td></tr>\n\
     <tr bgcolor=\"gray\"><th colspan=\"3\" align=\"center\"><a name=\"end\">&nbsp;%s&nbsp;</th></tr>\n\
     <tr><td colspan=\"3\" align=\"center\"><br /><small><small><i>This html diff was produced by rfcdiff %s, available from <a href=\"http://www.levkowetz.com/ietf/tools/rfcdiff/\">http://www.levkowetz.com/ietf/tools/rfcdiff/</a></i></small></small></td></tr>\n\
   </table>\n\
   </body>\n\
   </html>\n", diffnum?"End of changes.":"No changes.", ENVIRON["version"]);
	}
' $3
}

# ----------------------------------------------------------------------
# Utility to find an executable
# ----------------------------------------------------------------------
lookfor() {
    for b in "$@"; do
	found=$(which "$b" 2>/dev/null)
	if [ -n "$found" ]; then
	    if [ -x "$found" ]; then
		echo "$found"
		return
	    fi
	fi
    done
}

# ----------------------------------------------------------------------
# Utility to extract keyword info
# ----------------------------------------------------------------------
extract() {
    awk -v keyword=$1 '
	BEGIN {
	    # print "Keyword", keyword;
	}
	/^# [A-Z]/ {
	    # print "New key", $2;
	    if ($2 == keyword ":" ) { output=1; } else { output=0; }
	    # print "Output", output;
	}
	/^#\t/	{
	    # print "Content", output, $0;
	    if ( output ) {
		sub(/^#/,"");
		print;
	    }
	}
	{
	    next;
	}

    ' $2
}
# ----------------------------------------------------------------------
# Utility to start a browser
# ----------------------------------------------------------------------

browse() {
    browser=$(lookfor phoenix MozillaFirebird mozilla opera Netscape netscape)

    if [ -z "$browser" ]; then
	echo "Couldn't find any browser, can't display $*."
	exit 1
    fi

    # make sure file name is absolute
    if [ ${1#/} == $1 ]; then
        # not absolute path, add pwd
	arg="file://$PWD/$1"
    else
	arg="file://$1"
    fi


    # see if a browser is running, act accordingly
    $browser -remote "ping()" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
	# use running instance
	#echo "$browser -raise -remote \"openurl($arg, new-tab)\""
	$browser -raise -remote "openurl($arg, new-tab)"
    else
	# error exit: no running instance
	echo "Starting web browser."
	#echo "$browser $arg >/dev/null 2>&1 &"
	$browser $arg >/dev/null 2>&1 &
    fi
}


# ----------------------------------------------------------------------
# Utility for error exit
# ----------------------------------------------------------------------
die() {
   echo $*;
   exit 1;
}

# ----------------------------------------------------------------------
# Process options
# ----------------------------------------------------------------------
opthtml=1; optdiff=0; optchbars=0; optwdiff=0; optshow=0; optnowdiff=0;
optkeep=0; optinfo=0;

while [ $# -gt 0 ]; do
   case "$1" in
      --html)   opthtml=1; optdiff=0; optchbars=0; optwdiff=0;;
      --diff)   opthtml=0; optdiff=1; optchbars=0; optwdiff=0;;
      --chbars) opthtml=0; optdiff=0; optchbars=1; optwdiff=0;;
      --wdiff)  opthtml=0; optdiff=0; optchbars=0; optwdiff=1;;
      --version)echo "$basename $version"; exit 0;;
      --browse) optshow=1;;
      --nowdiff)optnowdiff=1;;
      --keep)	optkeep=1;;
      --info)	optinfo=1; keyword=$2; shift;;
      --help)	optinfo=1; keyword="Usage";;

      -r) options="$options $1 $2"; rev=$2; shift;;
      -v) echo "$basename $version"; exit 0;;
      -*) echo "Unrecognized option: $1";
	  exit 1;;
      *)  files="$files $1";;
   esac
   shift
done

# ----------------------------------------------------------------------
# Determine output file name. Maybe output usage and exit.
# ----------------------------------------------------------------------
#set -x

if [ $optinfo -gt 0 ]; then
   extract $keyword $0
   exit
fi
if [ "$files" ]; then
  set $files
fi
if [ $# -ge 2 ]; then
   if [ $1 = $2 ]; then
      echo "The files are the same file"
      exit
   fi
   export base1=$(basename $1)
   export base2=$(basename $2)
   outbase=$(worddiff $base2 $base1 "%s%s-from-%s")
else
   extract Usage $0
   exit 1
fi


# ----------------------------------------------------------------------
# create working directory.
# ----------------------------------------------------------------------
mkdir $workdir || die "$0: Error: Failed to create temporary directory '$workdir'."
mkdir $workdir/1 || die "$0: Error: Failed to create temporary directory '$workdir/1'."
mkdir $workdir/2 || die "$0: Error: Failed to create temporary directory '$workdir/2'."

# ----------------------------------------------------------------------
# Strip headers/footers from both files, possibly after downloading
# ----------------------------------------------------------------------

# The last file we strip determines the page numbers for htmldiff
wgetbin=$(lookfor wget)
dowgetarg1=0
dowgetarg2=0

if [ -n "$wgetbin" ]; then
   if [ ${1#http://} != $1 ]; then dowgetarg1=1; fi
   if [ ${1#ftp://} != $1 ]; then dowgetarg1=1; fi

   if [ ${2#http://} != $2 ]; then dowgetarg2=1; fi
   if [ ${2#ftp://} != $2 ]; then dowgetarg2=1; fi
fi

if [ $dowgetarg2 -gt 0 ]; then
   $wgetbin -nv -O - $2 | strip > $workdir/2/$base2
else
   strip $2 > $workdir/2/$base2
fi

if [ $dowgetarg1 -gt 0 ]; then
   $wgetbin -nv -O - $1 | strip > $workdir/1/$base1
else
   strip $1 > $workdir/1/$base1
fi

# ----------------------------------------------------------------------
# Get output file name
# ----------------------------------------------------------------------
if [ "$3" ]; then
  outfile=$3
else
    if [ $opthtml -gt 0 ]; then
      outfile=$outbase.diff.html
    fi
    if [ $optchbars -gt 0 ]; then
      outfile=$outbase.chbar
    fi
    if [ $optdiff -gt 0 ]; then
      outfile=$outbase.diff
    fi
fi
if [ "$outfile" ]; then
   tempout=$(basename $outfile)
fi

# ----------------------------------------------------------------------
# Check if we can use wdiff for block diffs
# ----------------------------------------------------------------------
if [ $optnowdiff -eq 0 ]; then
   wdiffbin=$(lookfor wdiff)
   if [ -n "$wdiffbin" ]; then
      wdiffver=$($wdiffbin --version 2>/dev/null | grep "wdiff.\+[0-9]\.[0-9]")
      if [ -z "$wdiffver" ]; then wdiffbin=""; fi
   fi
   export wdiffbin
   #echo "Found wdiff at $wdiffbin"
fi

# ----------------------------------------------------------------------
# Do diff
# ----------------------------------------------------------------------

cd $workdir
if cmp 1/$base1 2/$base2 >/dev/null; then
   echo ""
   echo "The files are identical."
fi

if [ $opthtml -gt 0 ]; then
   diff -ubBwd -$prelines 1/$base1 2/$base2 | tee $workdir/diff | htmldiff > $tempout
fi
if [ $optchbars -gt 0 ]; then
   diff -ubBwd -10000 1/$base1 2/$base2 | tee $workdir/diff | grep -v "^-" | tail +3 | sed 's/^+/|/' > $tempout
fi
if [ $optdiff -gt 0 ]; then
   diff -ubBwd -$prelines 1/$base1 2/$base2 | tee $workdir/diff | htmldiff > $tempout
fi
if [ $optwdiff -gt 0 ]; then
   wdiff -a 1/$base1 2/$base2 
fi

cd -; if [ -f $workdir/$tempout ]; then mv $workdir/$tempout $outfile; fi

if [ $optshow -gt 0 ]; then
   browse $outfile
fi

if [ $optkeep -eq 0 ]; then
   if [ -f $pagecache ]; then rm $pagecache; fi
   rm -fr $workdir/1
   rm -fr $workdir/2
   rm $workdir/diff 
   rmdir $workdir
else
   echo "
   Temporary workfiles have been left in $workdir/"
fi


